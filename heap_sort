#include<iostream>
#include<cstdlib>
#include<vector>
#include<algorithm>
#include<functional>
#include<ctime>
using namespace std;
//若根节点为0则有
//parent(i) = (i-1)/2
//left(i) = i * 2 + 1
//right(i) = i * 2 + 2

//调整堆
void adjust_heap(vector<int> &v, int root, int n)
{   
	int left = 2 * root + 1;
	int right = 2 * root + 2;
	//从非叶子节点开始
	if (root < n / 2){ 
		int tmp = root;
		if (left<n && v[left]>v[tmp]) tmp = left;
		if (right<n && v[right]>v[tmp]) tmp = right;
		if (tmp!=root){
			swap(v [tmp],v[root]);
			//交换后的节点需要递归调整
			adjust_heap(v, tmp, n);
		}
	}
}


//建堆
void build_heap(vector<int> &v, int n){
	//从最后一个非叶子节点开始调整，网上建堆
	for (int i = (n-1)/2; i>=0; --i){
		adjust_heap(v, i, n); 
	}
   }

//堆排
void heap_sort(vector<int> &v, int n){
	if(v.empty()) return;
	build_heap(v, n);

	for (int i = n - 1; i >-1; --i){
		swap(v[0], v[i]);
		adjust_heap(v, 0, i);
	}

}

  
int main(){
	vector<int> v;
	int cnt = 1;
	for (int i = 0; i < 30; ++i)v.push_back(rand()%100);//随机数测试
	cout << "排序前" << endl;
	for (int i = 0; i < 30; ++i)cout << v[i] <<" ";
	cout << endl;

	cout << "建堆后" << endl;
	build_heap(v, v.size());
	for (int i = 0; i < 30; ++i)cout << v[i] << " ";
	cout << endl;

	heap_sort(v, v.size());

	cout << "排序后" << endl;
	for (int i = 0; i < 30; ++i)cout << v[i] << " ";
	cout << endl;

	getchar();
}
