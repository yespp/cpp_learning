#include<iostream>
#include<vector>
#include<algorithm>
#include<functional>
#include<queue>
using namespace std;
//优先队列容器与队列一样，只能从队尾插入元素，从队首删除元素。并非按照先进先出的原则进行，而是优先级高的元素先出队
//优先级队列可以用向量(vector)或双向队列(deque)来实现，默认是vector
//STL中的优先队列 - priorit_queue，包含在头文件”queue”中，可以使用具有默认优先级的已有数据结构；
//也可以在定义优先队列的时候传入自定义的优先级比较对象；或者使用自定义对象(数据结构)，但是必须重载好< 操作符。
//可以使用greater<int>()（降序）和less<int>(升序)，默认是less<int>(出队列为最大元素，剩下的都比它小)。
//priority_queue使用堆实现，所时间复杂度应该也为 O(log n)。

/*本操作有：
empty()  //判断一个队列是否为空
pop()  //删除队顶元素
push()  //加入一个元素
size()  //返回优先队列中拥有的元素个数
top()  //返回优先队列的队顶元素*/
struct node{
	int x, y;
	friend bool operator < (node a, node b ){
		return a.x>b.x;//结构体中x小的优先级高
	}
};

struct cmp1
{
	bool operator ()(int x, int y)
	{
		return x > y;//小的优先级高
	}
};

struct cmp2
{
	bool operator ()(int x, int y)
	{
		return x < y;//大的优先级高
	}
};

int main(){
	vector<int> ivec;	
	for (int i = 0; i < 20; ++i) ivec.push_back(rand() % 100);
	cout << "原始数组:" << endl;
	for (auto s : ivec) cout << s << " ";
	cout << endl;

	priority_queue<int> q1(ivec.begin(), ivec.end());
	//priority_queue<int> q2(ivec.begin(), ivec.end(),less<int>());和上面等价,都是降序
	cout << "默认优先队列:" << endl;
	for (int i = 0; i < 20; ++i){
		cout <<q1.top() << " ";//队首元素
		q1.pop();//弹出队列
	}
	cout << endl;
	if (q1.empty()) cout << "队列清空";
	cout << endl;

	priority_queue<int,vector<int>, greater<int> > q2;//升序，出队列为最小元素
	for (auto s : ivec)q2.push(s);
	cout << "大优先队列:" << endl;
	for (int i = 0; i < 20; ++i){
		cout << q2.top() << " ";//队首元素
		q2.pop();//弹出队列
	}
	cout << endl;
	if (q2.empty()) cout << "队列清空";
	cout << endl;

	for (int i = 0; i < 20; ++i){
		q2.push(rand() % 100);
		cout << q2.top() << " ";
	}
	cout << endl;
	for (int i = 0; i < 20; ++i){
		cout << q2.top() << " ";//队首元素
		q2.pop();//弹出队列
	}
	cout << endl;


	priority_queue<node> p3;//自定义数据结构，自定义优先级
	priority_queue<int, vector<int>, cmp1> p4; //传入入比较结构体，自定义优先级。
	priority_queue<int, vector<int>, cmp2> p5;

	for (int i = 0; i < 20; ++i){
		node tmp;
		tmp.x = rand() % 1000;//1000以内随机数
		tmp.y = rand() % 1000;
		p3.push(tmp);
	}
	cout << "自定义数据结构,x小优先：" << endl;
	for (int i = 0; i < 20; ++i){
		cout <<"x:"<< p3.top().x << " " <<"y:"<< p3.top().y << endl;
		p3.pop();
	}

	for (int i = 0; i < 20; ++i){
		int x = rand() % 20;
		p4.push(x);
		p5.push(x);
	}
	cout << "cmp1（小优先）:" << endl;
	while (!p4.empty()){
		cout << p4.top()<<" ";
		p4.pop();
	}
	cout << endl;
	cout << "cmp2（大优先）:" << endl;
	while (!p5.empty()){
		cout << p5.top()<<" ";
		p5.pop();
	}



	getchar();

}
